package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"
	"github.com/go-jet/jet/v2/mysql"
	"github.com/moznion/go-optional"
	"github.com/samber/lo"
	dbModel "github.com/tjmtmmnk/go-todo/pkg/db/model"
	"github.com/tjmtmmnk/go-todo/pkg/db/table"
	"github.com/tjmtmmnk/go-todo/pkg/dbx"
	"github.com/tjmtmmnk/go-todo/pkg/timex"
	"strconv"
	"time"

	"github.com/tjmtmmnk/go-todo/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	todos, err := dbx.Search[dbModel.Todos](
		ctx,
		table.Todos,
		mysql.ProjectionList{table.Todos.AllColumns},
		optional.None[mysql.BoolExpression](),
	)
	if err != nil {
		return nil, err
	}
	userIds := lo.Map(todos, func(todo dbModel.Todos, index int) mysql.Expression {
		return mysql.Uint64(todo.UserID)
	})
	users, err := dbx.Search[dbModel.Users](
		ctx,
		table.Users,
		mysql.ProjectionList{table.Users.AllColumns},
		optional.Some(table.Users.ID.IN(userIds...)),
	)
	if err != nil {
		return nil, err
	}
	userIdToUser := lo.KeyBy(users, func(user dbModel.Users) uint64 {
		return user.ID
	})

	todoModels := lo.Map(todos, func(todo dbModel.Todos, index int) *model.Todo {
		user, ok := userIdToUser[todo.UserID]
		if !ok {
			return nil
		}
		userCreatedAt := user.CreatedAt.In(timex.JST).Format(time.DateTime)
		userUpdatedAt := user.UpdatedAt.In(timex.JST).Format(time.DateTime)
		return &model.Todo{
			ID:       strconv.FormatUint(todo.ID, 10),
			ItemName: todo.ItemName,
			Done:     todo.Done,
			User: &model.User{
				ID:        strconv.FormatUint(user.ID, 10),
				Name:      user.Name,
				Nickname:  user.Nickname,
				CreatedAt: &userCreatedAt,
				UpdatedAt: &userUpdatedAt,
			},
			StartAt:   nil,
			EndAt:     nil,
			CreatedAt: nil,
			UpdatedAt: nil,
		}
	})

	return todoModels, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
