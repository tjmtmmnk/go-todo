package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"
	"strconv"
	"time"

	"github.com/go-jet/jet/v2/mysql"
	"github.com/moznion/go-optional"
	"github.com/samber/lo"
	"github.com/tjmtmmnk/go-todo/graph/model"
	dbModel "github.com/tjmtmmnk/go-todo/pkg/db/model"
	"github.com/tjmtmmnk/go-todo/pkg/db/table"
	"github.com/tjmtmmnk/go-todo/pkg/dbx"
	"github.com/tjmtmmnk/go-todo/pkg/timex"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	todos, err := dbx.Search[dbModel.Todos](ctx, dbx.GetDB(), &dbx.SelectArgs{
		Table:      table.Todos,
		ColumnList: mysql.ProjectionList{table.Todos.AllColumns},
		Where:      nil,
	})
	if err != nil {
		return nil, err
	}

	todoModels := lo.Map(todos, func(todo dbModel.Todos, index int) *model.Todo {
		return &model.Todo{
			ID:        strconv.FormatUint(todo.ID, 10),
			ItemName:  todo.ItemName,
			Done:      todo.Done,
			UserID:    todo.UserID,
			StartAt:   nil,
			EndAt:     nil,
			CreatedAt: nil,
			UpdatedAt: nil,
		}
	})

	return todoModels, nil
}

// User is the resolver for the user field.
func (r *todoResolver) User(ctx context.Context, obj *model.Todo) (*model.User, error) {
	user, err := dbx.Single[dbModel.Users](
		ctx,
		r.DB,
		&dbx.SelectArgs{
			Table:      table.Users,
			ColumnList: mysql.ProjectionList{table.Users.AllColumns},
			Where:      optional.Some(table.Users.ID.EQ(mysql.Uint64(obj.UserID))),
		},
	)
	if err != nil {
		return nil, err
	}

	return &model.User{
		ID:        strconv.FormatUint(user.ID, 10),
		Name:      user.Name,
		Nickname:  user.Nickname,
		CreatedAt: user.CreatedAt.In(timex.JST).Format(time.DateTime),
		UpdatedAt: user.UpdatedAt.In(timex.JST).Format(time.DateTime),
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Todo returns TodoResolver implementation.
func (r *Resolver) Todo() TodoResolver { return &todoResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type todoResolver struct{ *Resolver }
