//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Todos = newTodosTable("devel", "todos", "")

type todosTable struct {
	mysql.Table

	// Columns
	ID        mysql.ColumnInteger
	UserID    mysql.ColumnInteger
	ItemName  mysql.ColumnString
	Done      mysql.ColumnBool
	CreatedAt mysql.ColumnTimestamp
	UpdatedAt mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type TodosTable struct {
	todosTable

	NEW todosTable
}

// AS creates new TodosTable with assigned alias
func (a TodosTable) AS(alias string) *TodosTable {
	return newTodosTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TodosTable with assigned schema name
func (a TodosTable) FromSchema(schemaName string) *TodosTable {
	return newTodosTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TodosTable with assigned table prefix
func (a TodosTable) WithPrefix(prefix string) *TodosTable {
	return newTodosTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TodosTable with assigned table suffix
func (a TodosTable) WithSuffix(suffix string) *TodosTable {
	return newTodosTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTodosTable(schemaName, tableName, alias string) *TodosTable {
	return &TodosTable{
		todosTable: newTodosTableImpl(schemaName, tableName, alias),
		NEW:        newTodosTableImpl("", "new", ""),
	}
}

func newTodosTableImpl(schemaName, tableName, alias string) todosTable {
	var (
		IDColumn        = mysql.IntegerColumn("id")
		UserIDColumn    = mysql.IntegerColumn("user_id")
		ItemNameColumn  = mysql.StringColumn("item_name")
		DoneColumn      = mysql.BoolColumn("done")
		CreatedAtColumn = mysql.TimestampColumn("created_at")
		UpdatedAtColumn = mysql.TimestampColumn("updated_at")
		allColumns      = mysql.ColumnList{IDColumn, UserIDColumn, ItemNameColumn, DoneColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = mysql.ColumnList{UserIDColumn, ItemNameColumn, DoneColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return todosTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		UserID:    UserIDColumn,
		ItemName:  ItemNameColumn,
		Done:      DoneColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
